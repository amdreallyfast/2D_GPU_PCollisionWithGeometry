// REQUIRES Shaders/ShaderHeaders/Version.comp
// REQUIRES Shaders/ShaderHeaders/ComputeShaderWorkGroupSizes.comp
// REQUIRES Shaders/ShaderHeaders/SsboBufferBindings.comp
// REQUIRES Shaders/ShaderHeaders/CrossShaderUniformLocations.comp
// REQUIRES Shaders/Compute/Collisions/ParticlePolygon/Buffers/CollidablePolygonBvhNodeBuffer.comp
// REQUIRES Shaders/Compute/Visualization/CollidablePolygonBoundingBoxGeometryBuffer.comp
// REQUIRES Shaders/Compute/GeometryStuff/Box2D.comp

// Y and Z work group sizes default to 1
layout (local_size_x = WORK_GROUP_SIZE_X) in;


/*------------------------------------------------------------------------------------------------
Description:
    Looks up each collidable polygon's BVH node and creates a 2D box out of it.
Parameters: None
Returns:    None
Creator:    John Cox, 7/2017
------------------------------------------------------------------------------------------------*/
void main()
{
    uint threadIndex = gl_GlobalInvocationID.x;
    //if (threadIndex >= uCollidablePolygonBvhNodeBufferSize)
    if (threadIndex != 32)
    {
        return;
    }

    BoundingBox bb = AllCollidablePolygonBvhNodes[threadIndex]._boundingBox;

    // ignore the surface normals of this geometry (it's only a 2D demo)
    MyVertex upperLeft;
    upperLeft._pos = vec4(bb._left, bb._top, 0.0f, 1.0f);

    MyVertex lowerLeft;
    lowerLeft._pos = vec4(bb._left, bb._bottom, 0.0f, 1.0f);

    MyVertex lowerRight;
    lowerRight._pos = vec4(bb._right, bb._bottom, 0.0f, 1.0f);

    MyVertex upperRight;
    upperRight._pos = vec4(bb._right, bb._top, 0.0f, 1.0f);

    Box2D bbGeometry;
    bbGeometry._left._start = upperLeft;
    bbGeometry._left._end = lowerLeft;
    bbGeometry._bottom._start = lowerLeft;
    bbGeometry._bottom._end = lowerRight;
    bbGeometry._right._start = lowerRight;
    bbGeometry._right._end = upperRight;
    bbGeometry._top._start = upperRight;
    bbGeometry._top._end = upperLeft;

    AllCollidableGeometryBoundingBoxes[threadIndex] = bbGeometry;
}
