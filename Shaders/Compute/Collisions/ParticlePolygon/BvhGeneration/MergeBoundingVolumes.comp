// REQUIRES Shaders/ShaderHeaders/Version.comp
// REQUIRES Shaders/ShaderHeaders/ComputeShaderWorkGroupSizes.comp
// REQUIRES Shaders/ShaderHeaders/SsboBufferBindings.comp
// REQUIRES Shaders/ShaderHeaders/CrossShaderUniformLocations.comp
// REQUIRES Shaders/Compute/Collisions/ParticlePolygon/Buffers/CollidablePolygonBvhNodeBuffer.comp

// Y and Z work group sizes default to 1
layout (local_size_x = WORK_GROUP_SIZE_X) in;


/*------------------------------------------------------------------------------------------------
Description:
    Like /Collisions/ParticleParticle/GvhGeneration/MergeBoundingVolumes.comp, but for the 
    collidable geometry.
Creator:    John Cox, 7/2017
------------------------------------------------------------------------------------------------*/
void main()
{
    uint threadIndex = gl_GlobalInvocationID.x;
    if (threadIndex >= uCollidablePolygonBvhNumberLeaves)
    {
        return;
    }

    // start at the leaves and merge bounding boxes up through the root
    // Note: The parent index should only be -1 at the root node.
    int nodeIndex = AllCollidablePolygonBvhNodes[threadIndex]._parentIndex;
    while(nodeIndex != -1)
    {
        // prevent race conditions to the parent node
        // Note: This suggestion comes the source material given in main()'s comment block.  
        // "To avoid duplicate work, the idea is to use an atomic flag per node to terminate the 
        // first thread that enters it, while letting the second one through. This ensures that 
        // every node gets processed only once, and not before both of its children are 
        // processed."
        // Also Note: If this is incremented more than twice, then there is a problem with the 
        // tree.  This is a binary tree, and a binary tree should have exactly two leaves per 
        // node.  A third increment, or a fourth, or more would mean that the node has more than 
        // two other nodes referencing it as their parent.  This is problem with tree 
        // construction, not bounding box merging.
        if (atomicAdd(AllCollidablePolygonBvhNodes[nodeIndex]._threadEntranceCounter, 1) == 0)
        {
            return;
        }
        
        int leftChildIndex = AllCollidablePolygonBvhNodes[nodeIndex]._leftChildIndex;
        int rightChildIndex = AllCollidablePolygonBvhNodes[nodeIndex]._rightChildIndex;
        BoundingBox leftBb = AllCollidablePolygonBvhNodes[leftChildIndex]._boundingBox;
        BoundingBox rightBb = AllCollidablePolygonBvhNodes[rightChildIndex]._boundingBox;

        BoundingBox thisBb;
        thisBb._left = min(leftBb._left, rightBb._left);
        thisBb._right = max(leftBb._right, rightBb._right);
        thisBb._bottom = min(leftBb._bottom, rightBb._bottom);
        thisBb._top = max(leftBb._top, rightBb._top);
        AllCollidablePolygonBvhNodes[nodeIndex]._boundingBox = thisBb;

        // next
        nodeIndex = AllCollidablePolygonBvhNodes[nodeIndex]._parentIndex;
    }
}




