// REQUIRES Shaders/ShaderHeaders/Version.comp
// REQUIRES Shaders/ShaderHeaders/ComputeShaderWorkGroupSizes.comp
// REQUIRES Shaders/ShaderHeaders/SsboBufferBindings.comp
// REQUIRES Shaders/ShaderHeaders/CrossShaderUniformLocations.comp
// REQUIRES Shaders/Compute/Collisions/CollidablePolygonBuffer.comp
// REQUIRES Shaders/Compute/Collisions/ParticlePolygon/Buffers/CollidablePolygonBvhNodeBuffer.comp

// Y and Z work group sizes default to 1
layout (local_size_x = WORK_GROUP_SIZE_X) in;

/*------------------------------------------------------------------------------------------------
Description:
    The binary radix tree (framework of the BVH) is created by analyzing the data over which the 
    leaf nodes are organized.  In this demo, leaves are the bounding box containers for 
    collidable polygons and share indices with their corresponding polygon.
Creator:    John Cox, 7/2017
------------------------------------------------------------------------------------------------*/
void main()
{
    uint threadIndex = gl_GlobalInvocationID.x;
    if (threadIndex >= uMaxCollidablePolygons)
    {
        return;
    }
    
    // unlike particles, which can deactivate when out of bounds, the geometry will always be 
    // present
    AllCollidablePolygonBvhNodes[threadIndex]._isNull = 0;
    
    // create the bounding box for the bounding volume hierarchy
    vec4 p1 = AllCollidablePolygons[threadIndex]._start._pos;
    vec4 p2 = AllCollidablePolygons[threadIndex]._end._pos;

    BoundingBox bb;
//    bb._left = min(p1.x, p2.x);
//    bb._right = max(p1.x, p2.x);
//    bb._bottom = min(p1.y, p2.y);
//    bb._top = max(p1.y, p2.y);
    bb._left = -p1.x;//-5.0f;
    bb._right = +p1.x;//+5.0f;
    bb._bottom = -p1.y;//-7.0f;
    bb._top = +p1.y;//+7.0f;
    AllCollidablePolygonBvhNodes[threadIndex]._boundingBox = bb;
}
    