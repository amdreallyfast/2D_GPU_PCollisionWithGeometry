// REQUIRES Shaders/ShaderHeaders/Version.comp
// REQUIRES Shaders/ShaderHeaders/ComputeShaderWorkGroupSizes.comp
// REQUIRES Shaders/ShaderHeaders/SsboBufferBindings.comp
// REQUIRES Shaders/ShaderHeaders/CrossShaderUniformLocations.comp
// REQUIRES Shaders/Compute/Collisions/ParticlePolygonCollisions/Buffers/CollidablePolygonSortingDataBuffer.comp
// REQUIRES Shaders/Compute/Collisions/ParticlePolygonCollisions/Buffers/CollidableGeometryPrefixScanBuffer.comp

// Y and Z work group sizes default to 1
layout (local_size_x = WORK_GROUP_SIZE_X) in;

// also used in GetBitForPrefixScans.comp (different uniform of course because different shader)
layout(location = UNIFORM_LOCATION_BIT_NUMBER) uniform uint uBitNumber;


/*------------------------------------------------------------------------------------------------
Description:
    Like ParticleParticleCollisions/ParticleSort/SortSortingDataWithPrefixSums.comp, but for the 
    collidable geometry.
Parameters: None
Returns:    None
Creator:    John Cox, 7/2017
------------------------------------------------------------------------------------------------*/
void main()
{
    uint threadIndex = gl_GlobalInvocationID.x;
    if (threadIndex >= uMaxNumCollidablePolygonSortingData)
    {
        // no Morton Code to sort
        return;
    }

    uint prefixSumOfOnes = AllCollidableGeometryPrefixSums[threadIndex];
    uint offsetForZeros = threadIndex - prefixSumOfOnes;
    uint totalNumberOfZeros = uMaxNumCollidablePolygonSortingData - totalNumberOfOnes;

    // determines if the value should go with the 0s or with the 1s on this sort step
    uint sourceIndex = threadIndex + uCollidablePolygonSortingDataBufferReadOffset;
    uint bitVal = (AllGeometrySortingData[sourceIndex]._sortingData >> uBitNumber) & 1;

    uint destinationIndex = (bitVal == 0) ? offsetForZeros : (totalNumberOfZeros + prefixSumOfOnes);
    destinationIndex += uCollidablePolygonSortingDataBufferWriteOffset;

    // do the sort
    AllGeometrySortingData[destinationIndex] = AllGeometrySortingData[sourceIndex];
}
