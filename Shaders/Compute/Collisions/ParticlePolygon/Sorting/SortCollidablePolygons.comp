// REQUIRES Shaders/ShaderHeaders/Version.comp
// REQUIRES Shaders/ShaderHeaders/ComputeShaderWorkGroupSizes.comp
// REQUIRES Shaders/ShaderHeaders/SsboBufferBindings.comp
// REQUIRES Shaders/ShaderHeaders/CrossShaderUniformLocations.comp
// REQUIRES Shaders/Compute/Collisions/ParticlePolygonCollisions/Buffers/CollidablePolygonSortingDataBuffer.comp
// REQUIRES Shaders/Compute/Collisions/CollidablePolygonBuffer.comp

// Y and Z work group sizes default to 1
layout (local_size_x = WORK_GROUP_SIZE_X) in;


/*------------------------------------------------------------------------------------------------
Description:
    Like ParticleParticleCollisions/ParticleSort/SortParticles.comp, but for the collidable geometry.
Parameters: None
Returns:    None
Creator:    John Cox, 7/2017
------------------------------------------------------------------------------------------------*/
void main()
{
    uint threadIndex = gl_GlobalInvocationID.x;
    if (threadIndex >= uMaxCollidablePolygons) // or uMaxNumCollidablePolygonSortingData
    {
        return;
    }

    uint sortedDataIndex = threadIndex + uCollidablePolygonSortingDataBufferReadOffset;
    uint sourceIndex = AllGeometrySortingData[sortedDataIndex]._preSortedIndex;

    // the unsorted particles are in the second half of the buffer
    sourceIndex += uMaxCollidablePolygons;

    // the SortingData structure is already sorted, so whatever index it is at now is the 
    // same index where the original data should be 
    AllCollidablePolygons[threadIndex] = AllCollidablePolygons[sourceIndex];
}