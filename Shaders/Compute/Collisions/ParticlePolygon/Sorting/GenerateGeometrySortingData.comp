// REQUIRES Shaders/ShaderHeaders/Version.comp
// REQUIRES Shaders/ShaderHeaders/ComputeShaderWorkGroupSizes.comp
// REQUIRES Shaders/ShaderHeaders/SsboBufferBindings.comp
// REQUIRES Shaders/ShaderHeaders/CrossShaderUniformLocations.comp
// REQUIRES Shaders/Compute/Collisions/PositionToMortonCode.comp
// REQUIRES Shaders/Compute/Collisions/ParticlePolygon/Buffers/CollidablePolygonSortingDataBuffer.comp
// REQUIRES Shaders/Compute/Collisions/CollidablePolygonBuffer.comp


// Y and Z work group sizes default to 1
layout (local_size_x = WORK_GROUP_SIZE_X) in;

/*------------------------------------------------------------------------------------------------
Description:
    Generates a Morton Code for the current thread's geometry's position.
Parameters: None
Returns:    None
Creator:    John Cox, 7/2017
------------------------------------------------------------------------------------------------*/
void main()
{
    uint threadIndex = gl_GlobalInvocationID.x;
    if (threadIndex >= uMaxCollidablePolygons) // or uMaxNumCollidablePolygonSortingData
    {
        return;
    }

    // the position shall be the center of the polygon
    vec4 p1 = AllCollidablePolygons[threadIndex]._start._pos;
    vec4 p2 = AllCollidablePolygons[threadIndex]._end._pos;
    vec4 centerPos = (p1 + p2) * 0.5f;

    AllCollidablePolygonSortingData[threadIndex]._sortingData = PositionToMortonCode(centerPos);
    AllCollidablePolygonSortingData[threadIndex]._preSortedIndex = int(threadIndex);
}
