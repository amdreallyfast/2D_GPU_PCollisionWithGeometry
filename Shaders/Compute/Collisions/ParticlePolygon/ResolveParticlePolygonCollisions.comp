// REQUIRES Shaders/ShaderHeaders/Version.comp
// REQUIRES Shaders/ShaderHeaders/ComputeShaderWorkGroupSizes.comp
// REQUIRES Shaders/ShaderHeaders/SsboBufferBindings.comp
// REQUIRES Shaders/ShaderHeaders/CrossShaderUniformLocations.comp
// REQUIRES Shaders/Compute/Collisions/ParticlePolygon/Buffers/PotentialParticlePolygonCollisionsBuffer.comp
// REQUIRES Shaders/Compute/ParticleBuffer.comp
// REQUIRES Shaders/Compute/Collisions/CollidablePolygonBuffer.comp

// Y and Z work group sizes default to 1
layout (local_size_x = WORK_GROUP_SIZE_X) in;


/*------------------------------------------------------------------------------------------------
Description:
    I learned about the "perpendicular dot product" from here:
    http://www.dreamincode.net/forums/topic/329073-intersection-point-of-two-vectors/

    And here:
    http://devmag.org.za/2009/08/12/vector-fundamentals/

    Note: The "prependicular dot product" ONLY works in 2D.  It only considers X and Y and so 
    would be useless in 3D (unless you have a problem reduced to 2D, in which case it is 
    conceivably useful).
Parameters: None
Returns:    None
Creator:    John Cox, 6/2017
------------------------------------------------------------------------------------------------*/
#define PerpDot(a,b) ((a.x * b.y) - (a.y * b.x))


/*------------------------------------------------------------------------------------------------
Description:
    For each potential polygon collision, each particle examines that polygon's faces in the 
    CollidablePolygonBuffer and bounces off them if the particle has traveled through it.

    Consider two line segments "a" and "b".  Each are defined by a position vector + travel 
    vector.  Their intersection will occur at some fraction t (I could have chosen another 
    letter) from 0-1 between their start point + the travel vector.  That is:
    
    Intersection point on a = a.start + t*a
    Intersection point on b = b.start + s*a ("s" is a different fraction between 0-1)

    Fraction t is defined as t = PerpendicularDot(b,c) / PerpendicularDot(a,b)  
    Fraction s is defined as s = PerpendicularDot(a,c) / PerpendicularDot(a,b)
    
    Where "c" is (a.start - b.start).  See PerpDot() at top of file for detail.
    
    This applies to line segments only, so even if the lines defined by their travel 
    vectors eventually intersect, the segments do not intersect if t or s is <0 or >1.

    I don't have a visual understanding of why this works, but after working it out by hand and 
    debugging wrong variations of it, I am confident that it works.

    Note: I learned of the intersection check via this forum post:
    http://www.dreamincode.net/forums/topic/329073-intersection-point-of-two-vectors/

    And via this stackoverflow response by Gavin:
    https://stackoverflow.com/questions/563198/how-do-you-detect-where-two-line-segments-intersect/565282#565282

    And I learned of the reflection around a vector from here:
    http://www.3dkingdoms.com/weekly/weekly.php?a=2

    The stackoverflow response is correct, but it works with loads of individual floats and not 
    vectors.  The dreamincode.net forum is more condensed and uses vectors, but is wrong (so I 
    learned from the stackoverflow response) in that it only checks against t, not s.

    Also Note: This particle-geometry detection only works in 2D.  PerpendicularDot(...) is a 2D-
    only function.  The reflection around a vector though will work in 2D and 3D.

Parameters: None
Returns:    None
Creator:    John Cox, 6/2017
------------------------------------------------------------------------------------------------*/
void main()
{
    uint threadIndex = gl_GlobalInvocationID.x;
    if (threadIndex >= uMaxNumParticles)
    {
        return;
    }
    else if (AllParticles[threadIndex]._isActive == 0)
    {
        return;
    }

    // make local copies for easier access
    Particle p = AllParticles[threadIndex];
    PotentialParticleCollisions collisionCandidates = AllPotentialParticlePolygonCollisions[threadIndex];

    // go through all the collision candidates, and if necessary calculate collision results
    for (int polygonIndexCounter = 0; 
        polygonIndexCounter < collisionCandidates._numPotentialCollisions; 
        polygonIndexCounter++)
    {
        int polyIndex = collisionCandidates._objectIndexes[polygonIndexCounter];
        PolygonFace polyFace = AllCollidablePolygons[polyIndex];

        // figure out where (and if) it crossed the line
        vec4 a = (p._currPos - p._prevPos);
        vec4 b = (polyFace._end._pos - polyFace._start._pos);
        vec4 c = (p._prevPos - polyFace._start._pos);
        float s = PerpDot(a, c) / PerpDot(a, b);
        float t = PerpDot(b, c) / PerpDot(a, b);

        // bounds checks <0 or >1 -> no intersection
        // inf -> parallel
        // nan -> ??can this happen??
        bool sIsBad = s < 0.0f || s > 1.0f || isinf(s) || isnan(s);
        bool tIsBad = t < 0.0f || t > 1.0f || isinf(t) || isnan(t);
        if (sIsBad || tIsBad)
        {
            // close, but no cigar
            continue;
        }

        // the particle crossed the line; bounce it
        // Note: Work out this equation on paper and it will hopefully make visual sense.  It 
        // did for me.
        // Also Note: The line segment remaining after the point of intersection is traveling in 
        // the same direction as the incident vector.  This algorithm reflects that remaining 
        // line segment around the polygon so that the particle is placed where would have been 
        // if it had bounced off at the moment of impact instead of in delta-time steps like the 
        // computer program it is.
        vec4 pointOfIntersection = p._prevPos + (t * a);
        vec4 posIncidentVector = p._currPos - pointOfIntersection;

        // Note: Both vertices normals are the same for any given PolygonFace, so either 
        // vertices' normal will work
        vec4 n = polyFace._start._normal;
        
        // Note: The velocity vector is just a direction, so it doesn't need to be altered at 
        // the point of intersection like position does.  Just reflect it as is.
//        vec4 reflectedPosVector = posIncidentVector - ((2 * dot(posIncidentVector, n)) * n);
        vec4 reflectedVelVector = p._vel - ((2 * dot(p._vel, n)) * n);
        
        // bump the new "previous" position out from the polygon so that there is no risk of 
        // intersection next frame due to floating-point variations on the line itself.
        AllParticles[threadIndex]._prevPos = pointOfIntersection + (n * 0.005f);
        AllParticles[threadIndex]._currPos = pointOfIntersection + (n * 0.010f);// + reflectedPosVector;
        AllParticles[threadIndex]._vel = reflectedVelVector;

        // a particle can only cross one polygon at a time (??you sure??)
        break;
    }
}

