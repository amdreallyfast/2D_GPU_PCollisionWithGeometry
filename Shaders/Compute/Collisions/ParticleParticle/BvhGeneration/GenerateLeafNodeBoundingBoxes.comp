// REQUIRES Shaders/ShaderHeaders/Version.comp
// REQUIRES Shaders/ShaderHeaders/ComputeShaderWorkGroupSizes.comp
// REQUIRES Shaders/ShaderHeaders/SsboBufferBindings.comp
// REQUIRES Shaders/ShaderHeaders/CrossShaderUniformLocations.comp
// REQUIRES Shaders/Compute/ParticleBuffer.comp
// REQUIRES Shaders/Compute/ParticlePropertiesBuffer.comp
// REQUIRES Shaders/Compute/Collisions/ParticleParticle/Buffers/ParticleBvhNodeBuffer.comp

// Y and Z work group sizes default to 1
layout (local_size_x = WORK_GROUP_SIZE_X) in;

/*------------------------------------------------------------------------------------------------
Description:
    The binary radix tree (framework of the BVH) is created by analyzing the data over which the 
    leaf nodes are organized.  In this demo, leaves are the bounding box containers for 
    particles and share indices with their corresponding particles.
Creator:    John Cox, 5/2017
------------------------------------------------------------------------------------------------*/
void main()
{
    uint threadIndex = gl_GlobalInvocationID.x;
    if (threadIndex >= uMaxNumParticles)
    {
        return;
    }
    
    if (AllParticles[threadIndex]._isActive == 0)
    {
        AllParticleBvhNodes[threadIndex]._isNull = 1;
        return;
    }
    else
    {
        AllParticleBvhNodes[threadIndex]._isNull = 0;
    }
    
    // create the bounding box for the bounding volume hierarchy
    vec4 currPos = AllParticles[threadIndex]._currPos;
    vec4 prevPos = AllParticles[threadIndex]._prevPos;
    int particleTypeIndex = AllParticles[threadIndex]._particleTypeIndex;
    float r = AllParticleProperties[particleTypeIndex]._collisionRadius;

    BoundingBox bb;
    bb._left = min(currPos.x - r, prevPos.x - r);
    bb._right = max(currPos.x + r, prevPos.x + r);
    bb._bottom = min(currPos.y - r, prevPos.y - r);
    bb._top = max(currPos.y + r, prevPos.y + r);
    AllParticleBvhNodes[threadIndex]._boundingBox = bb;
}
    