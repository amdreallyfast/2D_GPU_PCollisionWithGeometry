// REQUIRES Version.comp
// REQUIRES ComputeShaderWorkGroupSizes.comp
// REQUIRES SsboBufferBindings.comp
// REQUIRES CrossShaderUniformLocations.comp
// REQUIRES ParticleBuffer.comp
//// REQUIRES ParticleBoundingBoxesBuffer.comp
// REQUIRES CollideableGeometryBuffer.comp

// Y and Z work group sizes default to 1
layout (local_size_x = WORK_GROUP_SIZE_X) in;

//// this is a thread-specific global so that it doesn't have to be copied into 
//// BoundingBoxesOverlap(...) umpteen times as this shader runs
//BoundingBox thisParticleBoundingBox;
//
//
///*------------------------------------------------------------------------------------------------
//Description:
//    Determines if two bounding boxes overlap.  Shocking description, I know.
//
//    Note: This is only a potential collision.  Bounding boxes are just boxes, but particles have 
//    a collision radius (circle), so it is possible to have an overlap of two boxes that doesn't 
//    result in the two particles' collision circles overlapping.
//Parameters: 
//    otherNodeBoundBox   A copy of the bounding box of the node to compare 
//                        thisThreadNodeBoundingBox against.
//Returns:    
//    True if they bounding boxes overlap, otherwise false.
//Creator:    John Cox, 6/2017
//------------------------------------------------------------------------------------------------*/
//bool BoundingBoxesOverlap(BoundingBox otherNodeBoundingBox)
//{
//    float overlapBoxLeft = max(thisThreadNodeBoundingBox._left, otherNodeBoundingBox._left);
//    float overlapBoxRight = min(thisThreadNodeBoundingBox._right, otherNodeBoundingBox._right);
//    float overlapBoxBottom = max(thisThreadNodeBoundingBox._bottom, otherNodeBoundingBox._bottom);
//    float overlapBoxTop = min(thisThreadNodeBoundingBox._top, otherNodeBoundingBox._top);
//
//    bool horizontalIntersection = (overlapBoxRight - overlapBoxLeft) > 0.0f;
//    bool verticalIntersection = (overlapBoxTop - overlapBoxBottom) > 0.0f;
//    return horizontalIntersection && verticalIntersection;
//}

/*------------------------------------------------------------------------------------------------
Description:
    Each particle examines all the polygon faces in the CollideableGeometryBuffer and bounces 
    off them if necessary.
Parameters: None
Returns:    None
Creator:    John Cox, 4/2017
------------------------------------------------------------------------------------------------*/
void main()
{
    uint threadIndex = gl_GlobalInvocationID.x;
    if (threadIndex >= uMaxNumParticles)
    {
        return;
    }
    else if (AllParticles[threadIndex]._isActive == 0)
    {
        return;
    }


}

